*****************
MILESTONES:
*****************

FRIDAY TODO:
    - figure out relative imports
	- If `Piece Table` looks good, implement `Piece Table`
		- Otherwise, implement `Rope` or `Gap Buffer`
        - Probably gonna implement rope
    - Implement deletion for `e` and `b`

SATURDAY TODO:
	- Get `dimtutor` set up and going
	- Implement Color Themes
	- Implement storage solution using `JSON` or `YAML` (preferably `YAML` so it's easier to edit, but `JSON` might be better)
	- Figure out a way to structure the themes so that they're easy to install and load
	- Create theme creator interface, store results
	- Create a `OPTIONS` state that lets you select theme (design it so that you can add onto it later)
    - Write bin search for linked lists
	
SUNDAY TODO:
	- Hackday @ se
	- Implement randomized quicksort if Amir hasn't already
	- Implement `undo` and `redo` buffer (trivial with `Piece Table`)
	- Implement a buffer for jumps (use a linked list so you can jump forward and backward)
	- Implement a buffer for commands that were previously called (same as jumps)
	
MONDAY TODO:
	- Hacktime today!
	- Implement emergency file saving
	- Compress that file upon exiting using Huffman Compression

TUESDAY TODO:
	- Implement a Suffix Trie for spellcheck
	- Implement minimap (look at how the one in vim is implemented)
	
WEDNESDAY TODO:
	- Refactor jumps ('w','e','b') so it's a lot faster (easy fix), 
		implementation of `editorUtil.getCharAtLineWithIndex(line,index)
		will make it easy
	- Work on piping for console output (so you can see what you're typing)
		- Set the output to a linked list and use drawlines() to draw it, and traverse it using moveUp, moveDown, etc
		- Exit the output with a defined key, maybe `ESC` or something
		- Run it similar to runFileNavigation
	- ONE WEEK LEFT UNTIL PROJECT IS DUE!
	
THURSDAY TODO:
	- Finish piping

FRIDAY TODO:
	- Implement real time automatic testing, use threading and a seperate pipe than stdin to pipe data into output prog
		so that the user doesn't have the stdin pipe (which curses is using) blocked while it's being tested
		
SATURDAY TODO:
	- Day/Night color mode, `redify` mode for increased red light exposure at night (like f.lux)
	- Implement inertial scrolling
	
SUNDAY TODO:
	- Implement as much of `VISUAL` mode as you can
	
MONDAY TODO:
	- Write up README.md and manual
	- Hacktime! presentation again (for some practice presenting)
	
TUESDAY TODO:
	- Presentation day!
	

IMPORTANT:
    - Make tests for all data structures and algorithms that run if that python script is running in main namespace 
	- might have to do some refactoring with the imports for that
    - file system movement is a mess, see if you can get rid of y and just use knowledge of which dir is the current dir to draw everything

Can do this one whenever, 0 thought required
    - Switch to a more pastel color scheme

Add functionality to do an operation multiple times (like `3w`)
Implement `VISUAL` mode
Implement copy paste containers tied to each key (not in vim but would be super awesome)

************
Bugs:
************

- Opening an empty file results in an error
	- Easy fix, if start is None then insert a line at the start

- Command window has black background instead of cool grey (easy fix, just don't want to bother myself with it yet

*********************
ONCE IT'S FINISHED
*********************
Prettify the `README.md` page, with gifs and screenshots and a link to a manual
Implement some sort of bug sending feature which sends bugs to my inbox

****************************
WISHLIST
****************************

Fix up console output (for example `python3` console doesn't work properly at all)
    - Set up console input

Spellcheck
    - Factor oracle, suffix trie (two modes?)

Inertial Scrolling
    - have to make drawLines faster before doing this

Konami Code easter egg


******
IMPORTANT
******

Stuff to mention during 275 presentation:

    Held to PEP8 standard

    Briefly describe the finite state machine design
    
    Used a linked list to represent all of the lines
	- makes insertion and deletion O(1) intead of O(n)
	    - talk about python list slices creating a new list, worse for memory too

    Talk about usage of abstraction to make implementing features and changing implementations of existing features relatively painless
	- learned about importance throughout project, came to appreciate it when I had to change line storage from list to linked list to make inserting and deleting lines very fast (was very easy refactor)
    - used heavily for drawLines(), refactored it so I could use it for filenavscr and editorscr

    Talk about `subprocess`, `subprocess.Popen`, etc
        - Bang! implementation; pipe handling

    Implemented Syntax Highlighting using `pygments`
        - Used a colors array for each line, kept control of it really similar to the text itself
    
    Talk a little bit about how you structured the file system to keep things cleanish

    Talk about binary search implementation for file navigation

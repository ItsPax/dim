Must do:

Implement cmd-line control
Implement file navigator
Implement `a` and `A` insertion
Implement `x` deletion
Implement `d` deletion
Add functionality to do an operation multiple times (like `75gg` or `3w`)
Implement `g` functionality (whatever it is)
Implement `VISUAL` mode
Implement a buffer for movement jumps (`w,e,g,etc`) (so you can reverse them)
Implement a buffer for deletions (so you can recover up to like 1000 deletions or whatever)

Bugs:

Inserting on the last character of the line replaces the last character with what you type

Wishlist:
Get a save file system going similar to swap
    - Compress it using huffman compression if space is available
Syntax highlighting
    - Regex Lexer (idk, do more research)
Spellcheck
    - Factor oracle, suffix trie (two modes?)

Find a more efficient solution for `w` jumping, one right now is very costly, in this scenario efficiency > elegance
***Refactor word jumping (`w` and `b`) for more clean code (decent but could be better)

******
IMPORTANT
******

Stuff to mention during 275 presentation:
    
    Used a linked list to represent all of the lines
	- makes insertion and deletion O(1) intead of O(n)
	    - talk about python list slices creating a new list, worse for memory too

    Talk about usage of abstraction to make implementing features and changing implementations of existing features relatively painless
	- learned about importance throughout project, came to appreciate it when I had to change line storage from list to linked list to make inserting and deleting lines very fast

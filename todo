Should do (in order probably):

Subclass curses mainscr so you can store your topline, currentline, etc attributes within the object to make it more oop like and way easier to debug

Implement randomized quicksort for the dir strings with comparison operator that compares the lowercase value of both strings
Implement substring matching (searching feature) in file using KMP for O(n)
Implement a 'rope' data structure for fast insertion into a line (O(1) instead of O(n))
	- Look into `Piece Table`
	- Look into `Gap buffer`
Refactor jumps ('w','e','b') so it's a lot faster
Implement `x` deletion
Implement `dd` deletion
Implement deletion buffer
Implement `u` undo and `ctrl+r` redo (with buffers)

IMPORTANT:
    - Make tests for all data structures and algorithms that run if that python script is running in main namespace 
	- might have to do some refactoring with the imports for that

Can do this one whenever, 0 thought required
    - Switch to a more pastel color scheme

Add functionality to do an operation multiple times (like `3w`)
Implement `VISUAL` mode
Implement a buffer for movement jumps (`w,e,g,etc`) (so you can reverse them)
Implement `ctrl+O` and `ctrl+I` movement
Implement a buffer for deletion (just store the last deletion)
Implement copy paste containers tied to each key (not in vim but would be super awesome)
Implement a buffer for cmd line commands
Implement more cmd line controls (look at vim docs for ideas)

************
Bugs:
************

- Opening an empty file results in an error
- Using a hack for drawing some of the lines, ignore until you refactor drawLines() by subclassing mainscr from curses and adding all the attributes


*********************
ONCE IT'S FINISHED
*********************
Prettify the `README.md` page, with gifs and screenshots and a link to a manual
Implement some sort of bug sending feature which sends bugs to my inbox



Wishlist (no particular order):
Fix up console output (for example `python3` console doesn't work properly at all)
    - Set up console input

Get a save file system going similar to swap
    - Compress it using huffman compression if space is available (can check using os)

Spellcheck
    - Factor oracle, suffix trie (two modes?)

Real time automatic testing
    - Given input to stream in, output to check against, try every couple seconds (if prog will compile) and if it matches notify user (maybe add regex for a little flex)

Implement minimap
    - look at vim minimap plugin and see how it works

Inertial Scrolling
    - have to make drawLines faster before doing this

Implement night/day color schemes 
    - Need to refactor color scheming to make it easier in the future anyways
    - Maybe display `!` in all colors and let the user pick with some prompts?


Konami Code easter egg

******
IMPORTANT
******

Stuff to mention during 275 presentation:

    Mostly held to PEP8 standard
    
    Used a linked list to represent all of the lines
	- makes insertion and deletion O(1) intead of O(n)
	    - talk about python list slices creating a new list, worse for memory too

    Talk about usage of abstraction to make implementing features and changing implementations of existing features relatively painless
	- learned about importance throughout project, came to appreciate it when I had to change line storage from list to linked list to make inserting and deleting lines very fast (was very easy refactor)
    - used heavily for drawLines(), refactored it so I could use it for filenavscr and editorscr

    Talk about `subprocess`, `subprocess.Popen`, etc
        - Bang! implementation; pipe handling

    Implemented Syntax Highlighting using `pygments`
        - Used a colors array for each line, kept control of it really similar to the text itself
    
    Talk a little bit about how you structured the file system to keep things cleanish

    Talk about binary search implementation for file navigation

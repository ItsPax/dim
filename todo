*****************
MILESTONES:
*****************

SUNDAY TODO:
	- If `Piece Table` looks good, implement `Piece Table`
	    - Otherwise, implement `Rope` or `Gap Buffer`
        - Probably gonna implement rope
	- Get `dimtutor` set up and going
    - Implement deletion `b`
    - Implement command saving (push it into a doubly linked list and let the user 
            navigate using uparrow and downarrow)
	- Implement a buffer for jumps (use a doubly linked list so you can jump forward and backward)
    - Implement macros (use concept similar to undoRedoStack)
	
MONDAY TODO:
	- Implement emergency file saving
	- Compress that file upon exiting using Huffman Compression

TUESDAY TODO:
	- Implement minimap (look at how the one in vim is implemented)
	
WEDNESDAY TODO:
	- Work on piping for console output (so you can see what you're typing)
		- Set the output to a linked list and use drawlines() to draw it, and traverse it using moveUp, moveDown, etc
		- Exit the output with a defined key, maybe `ESC` or something
		- Run it similar to runFileNavigation
	- ONE WEEK LEFT UNTIL PROJECT IS DUE!
	
THURSDAY TODO:
	- Finish piping

FRIDAY TODO:
	- Implement real time automatic testing, use threading and a seperate pipe than stdin to pipe data into output prog so that the user doesn't have the stdin pipe (which curses is using) blocked while it's being tested
		
SATURDAY TODO:
	- Day/Night color mode, `redify` mode for increased red light exposure at night (like f.lux)
	
SUNDAY TODO:
	- Implement as much of `VISUAL` mode as you can
    - Hackday at se
	
MONDAY TODO:
	- Write up README.md and manual
	- Hacktime! presentation (for some practice presenting)
	
TUESDAY TODO:
	- Presentation day!
	

IMPORTANT:
    - Make tests for all data structures and algorithms that run if that python script is running in main namespace 

Implement `VISUAL` mode
Implement copy paste containers tied to each key (not in vim but would be super awesome)

************
Bugs:
************

- Opening an empty file results in an error
	- Easy fix, if start is None then insert a line at the start

*********************
ONCE IT'S FINISHED
*********************
Prettify the `README.md` page, with gifs and screenshots and a link to a manual

****************************
WISHLIST
****************************

Spellcheck
    - Factor oracle, suffix trie (two modes?)

Inertial Scrolling
    - have to make a lot of stuff faster before doing this

******
IMPORTANT
******

Stuff to mention during 275 presentation:

    Held to PEP8 standard

    Briefly describe the finite state machine design
    
    Used a linked list to represent all of the lines
	- makes insertion and deletion O(1) intead of O(n)
	    - talk about python list slices creating a new list, worse for memory too

    Talk about usage of abstraction to make implementing features and changing implementations of existing features relatively painless
	- learned about importance throughout project, came to appreciate it when I had to change line storage from list to linked list to make inserting and deleting lines very fast (was very easy refactor)
    - used heavily for drawLines(), refactored it so I could use it for filenavscr and editorscr

    Talk about `subprocess`, `subprocess.Popen`, etc
        - Bang! implementation; pipe handling

    Implemented Syntax Highlighting using `pygments`
        - Used a colors array for each line, kept control of it really similar to the text itself
    
    Talk a little bit about how you structured the file system to keep things cleanish

    Talk about binary search implementation for file navigation

    Talk about undo redo buffer a little
